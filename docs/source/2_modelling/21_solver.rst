.. _21_solver_label:

The solver
==========

The object :code:`Solver` is the key component. It is built as following: ::

 Solver solver = new Solver();

or::

 Solver solver = new Solver("my problem");


This should be the first instruction, prior to any other modelling instructions.
Indeed, a solver is needed to declare variables, and thus constraints.

Here is a list of the commonly used Solver API.

.. note::
    The API related to resolution are not described here but detailed in :ref:`Solving <31_solving_label>`.
    Similarly, API provided to add a constraint to the solver are detailed in :ref:`Constraints <23_constraints_label>`.
    The other missing methods are only useful for internal behavior.

Getters
-------

Variables
^^^^^^^^^

+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Method**                                    | **Definition**                                                                                                                                                               |
+===============================================+==============================================================================================================================================================================+
| ``Variable[] getVars()``                      | Return the array of variables declared in the solver. It includes all type of variables declared, integer, boolean, etc. but also *fixed* variables such as ``Solver.ONE``.  |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``int getNbVars()``                           | Return the number of variables involved in the solver.                                                                                                                       |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``Variable getVar(int i)``                    | Return the :math:`i^th` variable declared in the solver.                                                                                                                     |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``IntVar[] retrieveIntVars()``                | Extract from the solver variables those which are integer (ie whose *KIND* is set to *INT*, that is, including *fixed* integer variables and boolean variables).             |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``retrieveBoolVars()``                        | Extract from the solver variables those which are boolean (ie whose *KIND* is set to *BOOL*, that is, including ``Solver.ZERO`` and ``Solver.ONE``).                         |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``SetVar[] retrieveSetVars()``                | Extract from the solver variables those which are set (ie whose *KIND* is set to *SET*)                                                                                      |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``RealVar[] retrieveRealVars()``              | Extract from the solver variables those which are set (ie whose *KIND* is set to *REAL*)                                                                                     |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``GraphVar[] retrieveGraphVars()``            | Extract from the solver variables those which are graph (ie whose *KIND* is set to *GRAPH*)                                                                                  |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Constraints
^^^^^^^^^^^

+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Method**                                    | **Definition**                                                                                                                                                               |
+===============================================+==============================================================================================================================================================================+
| ``Constraint[] getCstrs()``                   | Return the array of constraints posted in the solver.                                                                                                                        |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``getNbCstrs()``                              | Return the number of constraints posted in the solver.                                                                                                                       |
+-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Other
^^^^^

+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
| **Method**                                    | **Definition**                                                                                    |
+===============================================+===================================================================================================+
| ``String getName()``                          | Return the name of the solver.                                                                    |
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
| ``IMeasures getMeasures()``                   | Return a reference to the measure recorder which stores resolution statistics.                    |
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
| ``AbstractStrategy getStrategy()``            | Return a reference to the declared search strategy.                                               |
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
| ``ISolutionRecorder getSolutionRecorder()``   | Return the solution recorder.                                                                     |
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
| ``IEnvironment getEnvironment()``             | Return the internal *environment* of the solver, essential to manage backtracking.                |
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
| ``ObjectiveManager getObjectiveManager()``    | Return the objective manager of the solver, needed when an objective has to be optimized.         |
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
| ``ExplanationEngine getExplainer()``          | Return the explanation engine declared, (default is *NONE*).                                      |
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
| ``IPropagationEngine getEngine()``            | Return the propagation engine of the solver, which *orchestrate* the propagation of constraints.  |
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+
| ``ISearchLoop getSearchLoop()``               | Return the search loop of the solver, which guide the search process.                             |
+-----------------------------------------------+---------------------------------------------------------------------------------------------------+

Setters
-------

+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Method**                                    | **Definition**                                                                                                                                            |
+===============================================+===========================================================================================================================================================+
| ``set(AbstractStrategy... strategies)``       | Set a strategy to explore the search space. In case many strategies are given, they will be called in sequence.                                           |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``set(ISolutionRecorder sr)``                 | Set a solution recorder, and erase the previous declared one (by default, ``LastSolutionRecorder`` is declared, it only stores the last solution found.   |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``set(ISearchLoop searchLoop)``               | Set the search loop to use during resolution. The default one is a binary search loop.                                                                    |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``set(IPropagationEngine propagationEngine)`` | Set the propagation engine to use during resolution. The default one is ``TwoBucketPropagationEngine``.                                                   |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``set(ExplanationEngine explainer)``          | Set the explanation engine to use during resolution. The default one is ``ExplanationEngine`` which does nothing.                                         |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``set(ObjectiveManager om)``                  | Set the objective manager to use during the resolution. *For advanced usage only*.                                                                        |
+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+


Others
------

+-------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| **Method**                                | **Definition**                                                                                                                       |
+===========================================+======================================================================================================================================+
| ``void plugMonitor(ISearchMonitor sm)``   | Put a :ref:`search monitor <44_monitors_label>` to react on search events (solutions, decisions, fails, ...).                        |
+-------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
| ``Solver duplicateModel()``               | Duplicate the model associates with a solver, ie only variables and constraints, and return a new solver.                            |
+-------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
